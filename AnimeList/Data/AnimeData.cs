using System;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Xml.Linq;

namespace AnimeList.Data
{
    /// <summary>
    /// Contains data related to an anime. This can be used in a user's anime list.
    /// </summary>
    public class AnimeData : IDisposable
    {
        /// <summary>
        /// Watch status of the anime.
        /// </summary>
        public enum AnimeStatus
        {
            Unknown,
            WontWatch,
            Dropped,
            Stalled,
            WantToWatch,
            Watching,
            Watched
        }

        /// <summary>
        /// The ID that's going to be used by the next anime data object.
        /// </summary>
        private static int _nextId = 0;

        private AnimeData(int id)
        {
            Id = id;
        }

        public AnimeData()
        {
            Id = _nextId++;
        }

        /// <summary>
        /// Unique identification number (ID) of this anime data. This is generated by this app.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// URL of this anime on its respective site.
        /// </summary>
        public string Url { get; set; }
        /// <summary>
        /// The cover image of this anime.
        /// </summary>
        public Image CoverImage { get; set; }
        /// <summary>
        /// The title of this anime.
        /// </summary>
        public string Title { get; set; }
        /// <summary>
        /// Type of this anime. For example, Movie, Music Video, etc.
        /// </summary>
        public string Type { get; set; }
        /// <summary>
        /// The year in which this anime was first streamed, or announced year for upcoming anime.<para/>
        /// Note: May be TBD/TBA or even an empty string if not known yet!
        /// </summary>
        public string Year { get; set; }
        /// <summary>
        /// Average global rating.
        /// </summary>
        public float AverageRating { get; set; }
        /// <summary>
        /// The current status of this anime on the anime list.
        /// </summary>
        public AnimeStatus Status { get; set; }
        /// <summary>
        /// The number of episodes this anime has.
        /// </summary>
        public int Episodes { get; set; }
        /// <summary>
        /// The number of times you watched this anime (from start to end).
        /// </summary>
        public int Repeats { get; set; }
        /// <summary>
        /// The number of stars you gave to this anime.
        /// </summary>
        public float Rating { get; set; }

        public void Dispose()
        {
            CoverImage?.Dispose();
        }

        /// <summary>
        /// Converts the data to XML format.
        /// </summary>
        /// <returns>the XML representation of this object</returns>
        public XElement ToXml()
        {
            return new XElement("anime",
                new XElement("id", Id),
                new XElement("url", Url),
                new XElement("title", Title),
                new XElement("type", Type),
                new XElement("year", Year),
                new XElement("averageRating", AverageRating),
                new XElement("status", Status),
                new XElement("episodes", Episodes),
                new XElement("repeats", Repeats),
                new XElement("rating", Rating)
            );
        }

        /// <summary>
        /// Constructs an anime data object from the given XML element.
        /// </summary>
        /// <param name="element">the XML element that has the anime data</param>
        /// <returns>the constructed anime data object</returns>
        public static AnimeData FromXml(XElement element)
        {
            return new AnimeData(int.Parse(element.Descendants("id").First().Value))
            {
                Url = element.Descendants("url").First().Value,
                Title = element.Descendants("title").First().Value,
                Type = element.Descendants("type").First().Value,
                Year = element.Descendants("year").First().Value,
                AverageRating = float.Parse(element.Descendants("averageRating").First().Value, CultureInfo.InvariantCulture),
                Status = (AnimeStatus)Enum.Parse(typeof(AnimeStatus), element.Descendants("status").First().Value),
                Episodes = int.Parse(element.Descendants("episodes").First().Value),
                Repeats = int.Parse(element.Descendants("repeats").First().Value),
                Rating = float.Parse(element.Descendants("rating").First().Value, CultureInfo.InvariantCulture)
            };
        }
    }
}
